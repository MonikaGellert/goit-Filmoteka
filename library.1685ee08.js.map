{"mappings":"oeAAAA,EAAA,SAEA,IAAIC,EAAgB,GAChBC,EAAe,G,iBCCnB,MAAMC,EAAUC,SAASC,cAAc,gBACvCF,EAAQG,UAAUC,IAAI,UACtB,MAAMC,EAAUJ,SAASC,cAAc,kBACjCI,EAAaL,SAASC,cAAc,gBACpCK,EAAWN,SAASC,cAAc,cAUlCM,EAAkBC,IACtB,MAAMC,EAAS,oGAEPD,EAAKE,+BACaF,EAAKG,+HAGnBH,EAAKG,2FAfJ,CAAAH,IACb,MAAMI,EAAgB,GACtB,IAAK,MAAMC,KAASL,EAAKM,OACvBF,EAAcG,KAAKF,EAAMG,MAE3B,OAAOJ,EAAcK,KAAK,OAadC,CAAOV,QAAWA,EAAKW,aAAaC,MAAM,KAAK,mDAI3DhB,EAAQiB,mBAAmB,YAAaZ,EAAA,GDE1C,WACE,GAA4Ca,MAAxCC,aAAaC,QAAQ,gBACvB,OAEF,MAAMC,EAAoBF,aAAaC,QAAQ,gBAC/C1B,EAAe4B,KAAKC,MAAMF,EAC5B,CCqBAG,GDpCA,WACE,GAA6CN,MAAzCC,aAAaC,QAAQ,iBACvB,OAEF,MAAMK,EAAqBN,aAAaC,QAAQ,iBAChD3B,EAAgB6B,KAAKC,MAAME,EAC7B,CC+BAC,GAEAzB,EAAW0B,iBAAiB,SA7BD,KACzBhC,EAAQG,UAAU8B,OAAO,UACzB5B,EAAQ6B,UAAY,GD8CtB,WACE,MAAMC,EAASX,aAAaC,QAAQ,iBAEpC,OADqBE,KAAKC,MAAMO,EAElC,CCjDEC,GAAyBC,KAAIC,KAC3B,EAAAC,EAAAC,iBAAgBF,GACbG,MAAKhC,IACJT,EAAQG,UAAUC,IAAI,UACtBI,EAAgBC,EAAA,IAEjBiC,OAAMC,GAASC,QAAQD,MAAMA,IAAA,GAClC,IAoBFpC,EAASyB,iBAAiB,SAjBA,KACxBhC,EAAQG,UAAU8B,OAAO,UACzB5B,EAAQ6B,UAAY,GDwCtB,WACE,MAAMC,EAASX,aAAaC,QAAQ,gBAEpC,OADqBE,KAAKC,MAAMO,EAElC,CC3CEU,GAAwBR,KAAIC,KAC1B,EAAAC,EAAAC,iBAAgBF,GACbG,MAAKhC,IACJT,EAAQG,UAAUC,IAAI,UACtBI,EAAgBC,EAAA,IAEjBiC,OAAMC,GAASC,QAAQD,MAAMA,IAAA,GAClC","sources":["src/JS/local_storage.js","src/library.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nlet watchedMovies = [];\nlet queuedMovies = [];\n\n/*\n */\n/* \n\nPrzykład:\n\nimport { addToWatched, addToQueue } from './JS/local_storage';\n\nBUTTON.addEventListener('click', () => addToWatched(movieID));\nBUTTON.addEventListener('click', () => addToQueue(movieID));\n\n\"movieID\" to będzie wynik funkcji pobierającej id filmu z modala\n\n*/\n/*\n */\n/*\n */\n\n/* funkcja potrzebna do pobrania wartości LocalStorage bo inaczej po zamknięciu strony będzie reset */\nfunction getLocalWatched() {\n  if (localStorage.getItem('watchedMovies') == undefined) {\n    return;\n  }\n  const localWatchedMovies = localStorage.getItem('watchedMovies');\n  watchedMovies = JSON.parse(localWatchedMovies);\n}\n\n/* funkcja potrzebna do pobrania wartości LocalStorage bo inaczej po zamknięciu strony będzie reset */\nfunction getLocalQueue() {\n  if (localStorage.getItem('queuedMovies') == undefined) {\n    return;\n  }\n  const localQueuedMovies = localStorage.getItem('queuedMovies');\n  queuedMovies = JSON.parse(localQueuedMovies);\n}\n\n/* dodaje id do \"watched\" do LocalStorage */\nfunction addToWatched(id) {\n  if (watchedMovies.includes(id)) {\n    return Notiflix.Notify.info(\"This film is already on your 'Watched' list!\");\n  }\n  watchedMovies.push(id);\n  localStorage.setItem('watchedMovies', JSON.stringify(watchedMovies));\n}\n\n/* dodaje id do \"queue\" do LocalStorage */\nfunction addToQueue(id) {\n  if (queuedMovies.includes(id)) {\n    return Notiflix.Notify.info(\"This film is already on your 'Queue' list!\");\n  }\n  queuedMovies.push(id);\n  localStorage.setItem('queuedMovies', JSON.stringify(queuedMovies));\n}\n\n/* usuwa id z LocalStorage */\nfunction deleteFromWatched(id) {\n  const movieToDelete = watchedMovies.findIndex(value => value == id);\n  if (movieToDelete != -1) {\n    watchedMovies.splice(movieToDelete, 1);\n    localStorage.setItem('watchedMovies', JSON.stringify(watchedMovies));\n    return;\n  }\n  Notiflix.Notify.failure(\"Sorry! This movie doesn't exist on your 'Watched' list!\");\n}\n\n/* usuwa id z LocalStorage */\nfunction deleteFromQueue(id) {\n  const movieToDelete = queuedMovies.findIndex(value => value == id);\n  if (movieToDelete != -1) {\n    queuedMovies.splice(movieToDelete, 1);\n    localStorage.setItem('queuedMovies', JSON.stringify(queuedMovies));\n    return;\n  }\n  Notiflix.Notify.failure(\"Sorry! This movie doesn't exist on your 'Queue' list!\");\n}\n\n/* pobiera id \"watched\" filmów z LocalStorage */\nfunction getWatchedMovies() {\n  const movies = localStorage.getItem('watchedMovies');\n  const moviesParsed = JSON.parse(movies);\n  return moviesParsed;\n}\n\n/* pobiera id \"queue\" filmów z LocalStorage */\nfunction getQueuedMovies() {\n  const movies = localStorage.getItem('queuedMovies');\n  const moviesParsed = JSON.parse(movies);\n  return moviesParsed;\n}\n\nexport {\n  addToWatched,\n  addToQueue,\n  deleteFromWatched,\n  deleteFromQueue,\n  getWatchedMovies,\n  getQueuedMovies,\n  getLocalWatched,\n  getLocalQueue,\n};\n","import './sass/main.scss';\nimport * as local from './JS/local_storage';\nimport { fetchMoviesByID } from './JS/api_films_database';\n\nconst spinner = document.querySelector('.loader__div');\nspinner.classList.add('hidden');\nconst gallery = document.querySelector('.section-films');\nconst watchedBtn = document.querySelector('#watched-btn');\nconst queueBtn = document.querySelector('#queue-btn');\n\nconst genres = film => {\n  const arrayOfGenres = [];\n  for (const genre of film.genres) {\n    arrayOfGenres.push(genre.name);\n  }\n  return arrayOfGenres.join(', ');\n};\n\nconst createFilmCards = film => {\n  const markup = `<div class=\"film-card\">\n        <img class=\"film-card__img\" src=\"https://image.tmdb.org/t/p/w500${\n          film.poster_path\n        }\" alt=\"poster of ${film.title}\" loading=\"lazy\"/>\n        <div class=\"film-card__info\">\n            <p class=\"film-card__info--title\">\n            ${film.title}\n            </p>\n            <p class=\"film-card__info--subtitle\">\n            ${genres(film)} | ${film.release_date.split('-')[0]}\n            </p>\n        </div>\n    </div>`;\n  gallery.insertAdjacentHTML('beforeend', markup);\n};\n\nconst handleClickWatched = () => {\n  spinner.classList.remove('hidden');\n  gallery.innerHTML = [];\n  local.getWatchedMovies().map(index => {\n    fetchMoviesByID(index)\n      .then(film => {\n        spinner.classList.add('hidden');\n        createFilmCards(film);\n      })\n      .catch(error => console.error(error));\n  });\n};\n\nconst handleClickQueued = () => {\n  spinner.classList.remove('hidden');\n  gallery.innerHTML = [];\n  local.getQueuedMovies().map(index => {\n    fetchMoviesByID(index)\n      .then(film => {\n        spinner.classList.add('hidden');\n        createFilmCards(film);\n      })\n      .catch(error => console.error(error));\n  });\n};\n\nlocal.getLocalQueue();\nlocal.getLocalWatched();\n\nwatchedBtn.addEventListener('click', handleClickWatched);\nqueueBtn.addEventListener('click', handleClickQueued);\n"],"names":["parcelRequire","$a9ccb7ca8c357315$var$watchedMovies","$a9ccb7ca8c357315$var$queuedMovies","$9a8afeea60b9dfd3$var$spinner","document","querySelector","classList","add","$9a8afeea60b9dfd3$var$gallery","$9a8afeea60b9dfd3$var$watchedBtn","$9a8afeea60b9dfd3$var$queueBtn","$9a8afeea60b9dfd3$var$createFilmCards","film","markup","poster_path","title","arrayOfGenres","genre","genres","push","name","join","$9a8afeea60b9dfd3$var$genres","release_date","split","insertAdjacentHTML","undefined","localStorage","getItem","localQueuedMovies","JSON","parse","$a9ccb7ca8c357315$export$66ac7cd585b4892","localWatchedMovies","$a9ccb7ca8c357315$export$32d14ed3e452883b","addEventListener","remove","innerHTML","movies","$a9ccb7ca8c357315$export$6a5de0e324116ba4","map","index","$5zJd0","fetchMoviesByID","then","catch","error","console","$a9ccb7ca8c357315$export$a63c752fef59b6cd"],"version":3,"file":"library.1685ee08.js.map"}